package app

import (
    "context"
    "errors"

    "github.com/zluudg/hellosrcdist/app/interfaces"
    "github.com/zluudg/hellosrcdist/app/logging"
    "github.com/zluudg/hellosrcdist/app/storage"
)

type Command int64

const (
	CmdVersion Command = iota
	CmdServe
)

func (cmd Command) String() string {
	switch cmd {
    case CmdVersion:
		return "version"
	case CmdServe:
		return "serve"
	}
	return "unknown"
}

type App struct {
    Debug bool
    Quiet bool

    Ctx context.Context

    Log interfaces.Logger
    Stor interfaces.Storage
}

func (a *App) Run(cmd Command) error {
    isDriversModified := false

    if a.Ctx == nil {
        return errors.New("No context provided")
    }

    if a.Log == nil {
        level := 3 /* INFO */
        if a.Debug {
            level = 4 /* DEBUG */
        }
        if a.Quiet {
            level = 2 /* WARNING, override "debug" */
        }
        log, err := logging.Create(level)
        if err != nil {
            panic("Could not create default logger!")
        }
        a.Log = log

    } else {
        isDriversModified = true
    }

    if a.Stor == nil {
        storConf := storage.Config{ Log: a.Log }
        stor, err := storage.Create(storConf)
        if err != nil {
            panic("Could not create default storage!")
        }
        a.Stor = stor

    } else {
        isDriversModified = true
    }

    if isDriversModified {
        a.Log.Info("Using modified drivers")
    } else {
        a.Log.Info("Using default drivers")
    }
    a.Log.Debug("Debug enabled")
    defer a.Stor.Shutdown()

    switch cmd {
    case CmdServe:
	    return a.cmdServe()
    case CmdVersion:
	    return a.cmdVersion()
    }

    return errors.New("Unknown command!")
}

func (a *App) cmdVersion() error {
    /* Print constants from version.go, dynamically generated by 'make build' */
    a.Log.Info("%s-%s", Name, Version)
    return nil
}

func (a *App) cmdServe() error {
    a.Log.Info("%s-%s, serving...", Name, Version)
    select {
    case <- a.Ctx.Done():
    }
    return nil
}
